
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from "@angular/common/http";
import { Observable, throwError } from 'rxjs';


import { catchError } from 'rxjs/internal/operators/catchError';
import { environment } from 'src/environments/environment';
import { Product } from 'src/app/shared/models/product';
import { SellerDeals } from 'src/app/shared/models/SellerDeals';

@Injectable({
  providedIn: 'root'
})
export class DealsForTodayServiceService {
 //  handleError:any="Some error occured"
  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });

  constructor(private http: HttpClient) { }

  getProductCategories(): Observable<string[]> {
    const url = environment.productAPIUrl + "/getProductCategories";
    return this.http.get<string[]>(url)
      .pipe(catchError(this.handleError));

  }

  getProductDeals(emailId:String):Observable<any[]>{
    console.log(emailId);
    const url=environment.SellerDealAPI + "/getDealProducts"+"/"+ emailId+"/"
    console.log(url)
    return this.http.get<any[]>(url).pipe(catchError(this.handleError))
  }
  removeProduct(deal : SellerDeals):Observable<SellerDeals>{
    const url = environment.SellerDealAPI + "/removeProduct"
    console.log(JSON.stringify(deal))
     
    
  return this.http.post<SellerDeals>(url,deal).pipe(catchError(this.handleError))
  }

  getProductsNotOnDeals(email:String):Observable<Product[]>{
    const url = environment.SellerDealAPI + "/getProductsNotOnDeals"+"/"+email+"/"
    return this.http.get<Product[]>(url).pipe(catchError(this.handleError))
  }
  addProductToDeal(deal:SellerDeals):Observable<SellerDeals>{
   const url = environment.SellerDealAPI + "/addProductsToDeal"
   return this.http.post<SellerDeals>(url,deal).pipe(catchError(this.handleError))
  }
  private handleError(err: HttpErrorResponse) {
    console.log(err)
    let errMsg: string = '';
    if (err.error instanceof Error) {
      errMsg = err.error.message;
      console.log(errMsg)
    }
    else if (typeof err.error === 'string') {
      errMsg = JSON.parse(err.error).message
    }
    else {
      if (err.status == 0) {
        errMsg = "A connection to back end can not be established.";
      } else {
        errMsg = err.error.message;
      }
    }
    return throwError(errMsg);
  }
}